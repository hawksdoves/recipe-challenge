// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RecipeSearch only displays recipes that match search 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    <input
        onChange={[Function]}
        placeholder="Recipe Search"
        type="text"
    />
    <List
        recipes={
            Array [
                Object {
                  "id": "1",
                  "ingredients": Array [
                    Object {
                      "name": "steak",
                      "quantity": "3",
                    },
                  ],
                  "name": "steak",
                },
              ]
        }
    />
</div>,
  "nodes": Array [
    <div>
      <input
            onChange={[Function]}
            placeholder="Recipe Search"
            type="text"
      />
      <List
            recipes={
                  Array [
                        Object {
                          "id": "1",
                          "ingredients": Array [
                            Object {
                              "name": "steak",
                              "quantity": "3",
                            },
                          ],
                          "name": "steak",
                        },
                      ]
            }
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <RecipeSearch
        recipes={
                Array [
                        Object {
                          "id": "1",
                          "ingredients": Array [
                            Object {
                              "name": "steak",
                              "quantity": "3",
                            },
                          ],
                          "name": "steak",
                        },
                        Object {
                          "id": "2",
                          "ingredients": Array [
                            Object {
                              "name": "chicken",
                              "quantity": "2",
                            },
                          ],
                          "name": "chicken",
                        },
                      ]
        }
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": RecipeSearch {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "recipes": Array [
            Object {
              "id": "1",
              "ingredients": Array [
                Object {
                  "name": "steak",
                  "quantity": "3",
                },
              ],
              "name": "steak",
            },
            Object {
              "id": "2",
              "ingredients": Array [
                Object {
                  "name": "chicken",
                  "quantity": "2",
                },
              ],
              "name": "chicken",
            },
          ],
        },
        "refs": Object {},
        "searchRecipes": [Function],
        "state": Object {
          "recipeResults": Array [
            Object {
              "id": "1",
              "ingredients": Array [
                Object {
                  "name": "steak",
                  "quantity": "3",
                },
              ],
              "name": "steak",
            },
          ],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          <input
                    onChange={[Function]}
                    placeholder="Recipe Search"
                    type="text"
          />
          <List
                    recipes={
                              Array [
                                        Object {
                                          "id": "1",
                                          "ingredients": Array [
                                            Object {
                                              "name": "steak",
                                              "quantity": "3",
                                            },
                                          ],
                                          "name": "steak",
                                        },
                                      ]
                    }
          />
</div>,
        "_debugID": 4,
        "_renderedOutput": <div>
          <input
                    onChange={[Function]}
                    placeholder="Recipe Search"
                    type="text"
          />
          <List
                    recipes={
                              Array [
                                        Object {
                                          "id": "1",
                                          "ingredients": Array [
                                            Object {
                                              "name": "steak",
                                              "quantity": "3",
                                            },
                                          ],
                                          "name": "steak",
                                        },
                                      ]
                    }
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <RecipeSearch
    recipes={
        Array [
            Object {
              "id": "1",
              "ingredients": Array [
                Object {
                  "name": "steak",
                  "quantity": "3",
                },
              ],
              "name": "steak",
            },
            Object {
              "id": "2",
              "ingredients": Array [
                Object {
                  "name": "chicken",
                  "quantity": "2",
                },
              ],
              "name": "chicken",
            },
          ]
    }
/>,
}
`;

exports[`RecipeSearch renders List 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    <input
        onChange={[Function]}
        placeholder="Recipe Search"
        type="text"
    />
    <List
        recipes={
            Array [
                Object {
                  "id": "1",
                  "ingredients": Array [
                    Object {
                      "name": "steak",
                      "quantity": "3",
                    },
                  ],
                  "name": "steak",
                },
                Object {
                  "id": "2",
                  "ingredients": Array [
                    Object {
                      "name": "chicken",
                      "quantity": "2",
                    },
                  ],
                  "name": "chicken",
                },
              ]
        }
    />
</div>,
  "nodes": Array [
    <div>
      <input
            onChange={[Function]}
            placeholder="Recipe Search"
            type="text"
      />
      <List
            recipes={
                  Array [
                        Object {
                          "id": "1",
                          "ingredients": Array [
                            Object {
                              "name": "steak",
                              "quantity": "3",
                            },
                          ],
                          "name": "steak",
                        },
                        Object {
                          "id": "2",
                          "ingredients": Array [
                            Object {
                              "name": "chicken",
                              "quantity": "2",
                            },
                          ],
                          "name": "chicken",
                        },
                      ]
            }
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <RecipeSearch
        recipes={
                Array [
                        Object {
                          "id": "1",
                          "ingredients": Array [
                            Object {
                              "name": "steak",
                              "quantity": "3",
                            },
                          ],
                          "name": "steak",
                        },
                        Object {
                          "id": "2",
                          "ingredients": Array [
                            Object {
                              "name": "chicken",
                              "quantity": "2",
                            },
                          ],
                          "name": "chicken",
                        },
                      ]
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": RecipeSearch {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "recipes": Array [
            Object {
              "id": "1",
              "ingredients": Array [
                Object {
                  "name": "steak",
                  "quantity": "3",
                },
              ],
              "name": "steak",
            },
            Object {
              "id": "2",
              "ingredients": Array [
                Object {
                  "name": "chicken",
                  "quantity": "2",
                },
              ],
              "name": "chicken",
            },
          ],
        },
        "refs": Object {},
        "searchRecipes": [Function],
        "state": Object {
          "recipeResults": Array [
            Object {
              "id": "1",
              "ingredients": Array [
                Object {
                  "name": "steak",
                  "quantity": "3",
                },
              ],
              "name": "steak",
            },
            Object {
              "id": "2",
              "ingredients": Array [
                Object {
                  "name": "chicken",
                  "quantity": "2",
                },
              ],
              "name": "chicken",
            },
          ],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          <input
                    onChange={[Function]}
                    placeholder="Recipe Search"
                    type="text"
          />
          <List
                    recipes={
                              Array [
                                        Object {
                                          "id": "1",
                                          "ingredients": Array [
                                            Object {
                                              "name": "steak",
                                              "quantity": "3",
                                            },
                                          ],
                                          "name": "steak",
                                        },
                                        Object {
                                          "id": "2",
                                          "ingredients": Array [
                                            Object {
                                              "name": "chicken",
                                              "quantity": "2",
                                            },
                                          ],
                                          "name": "chicken",
                                        },
                                      ]
                    }
          />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div>
          <input
                    onChange={[Function]}
                    placeholder="Recipe Search"
                    type="text"
          />
          <List
                    recipes={
                              Array [
                                        Object {
                                          "id": "1",
                                          "ingredients": Array [
                                            Object {
                                              "name": "steak",
                                              "quantity": "3",
                                            },
                                          ],
                                          "name": "steak",
                                        },
                                        Object {
                                          "id": "2",
                                          "ingredients": Array [
                                            Object {
                                              "name": "chicken",
                                              "quantity": "2",
                                            },
                                          ],
                                          "name": "chicken",
                                        },
                                      ]
                    }
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <RecipeSearch
    recipes={
        Array [
            Object {
              "id": "1",
              "ingredients": Array [
                Object {
                  "name": "steak",
                  "quantity": "3",
                },
              ],
              "name": "steak",
            },
            Object {
              "id": "2",
              "ingredients": Array [
                Object {
                  "name": "chicken",
                  "quantity": "2",
                },
              ],
              "name": "chicken",
            },
          ]
    }
/>,
}
`;

exports[`RecipeSearch renders error message if search had no matches 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    <input
        onChange={[Function]}
        placeholder="Recipe Search"
        type="text"
    />
    <div>
        Sorry, nothing matched your filter term
    </div>
</div>,
  "nodes": Array [
    <div>
      <input
            onChange={[Function]}
            placeholder="Recipe Search"
            type="text"
      />
      <div>
            Sorry, nothing matched your filter term
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <RecipeSearch
        recipes={
                Array [
                        Object {
                          "id": "1",
                          "ingredients": Array [
                            Object {
                              "name": "steak",
                              "quantity": "3",
                            },
                          ],
                          "name": "steak",
                        },
                        Object {
                          "id": "2",
                          "ingredients": Array [
                            Object {
                              "name": "chicken",
                              "quantity": "2",
                            },
                          ],
                          "name": "chicken",
                        },
                      ]
        }
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": RecipeSearch {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "recipes": Array [
            Object {
              "id": "1",
              "ingredients": Array [
                Object {
                  "name": "steak",
                  "quantity": "3",
                },
              ],
              "name": "steak",
            },
            Object {
              "id": "2",
              "ingredients": Array [
                Object {
                  "name": "chicken",
                  "quantity": "2",
                },
              ],
              "name": "chicken",
            },
          ],
        },
        "refs": Object {},
        "searchRecipes": [Function],
        "state": Object {
          "recipeResults": Array [],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          <input
                    onChange={[Function]}
                    placeholder="Recipe Search"
                    type="text"
          />
          <div>
                    Sorry, nothing matched your filter term
          </div>
</div>,
        "_debugID": 6,
        "_renderedOutput": <div>
          <input
                    onChange={[Function]}
                    placeholder="Recipe Search"
                    type="text"
          />
          <div>
                    Sorry, nothing matched your filter term
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <RecipeSearch
    recipes={
        Array [
            Object {
              "id": "1",
              "ingredients": Array [
                Object {
                  "name": "steak",
                  "quantity": "3",
                },
              ],
              "name": "steak",
            },
            Object {
              "id": "2",
              "ingredients": Array [
                Object {
                  "name": "chicken",
                  "quantity": "2",
                },
              ],
              "name": "chicken",
            },
          ]
    }
/>,
}
`;
